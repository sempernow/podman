#!/usr/bin/env bash
###############################
# AUTOGENERATED : DO NOT EDIT
###############################
admins_group=ad-linux-sudoers
app=podman
app_sudoers=podman-users
img=alpine

[[ -n "${SUDO_USER:-}" ]] || {
    echo "âš   USAGE: sudo ${BASH_SOURCE##*/}" >&2

    exit 1
}
logger "Script run by '$SUDO_USER' via sudo : '$BASH_SOURCE'"

domain_user=$SUDO_USER
[[ $1 ]] && groups $SUDO_USER |grep "$admins_group" && domain_user=$1

alt=/work/$app
alt_home=$alt/home/$domain_user
local_user=$app-$domain_user
local_group=$local_user

id "$local_user" >/dev/null 2>&1 && grep -qe "^$local_user" /etc/passwd && {
    echo "âš   Local user '$local_user' already exists." >&2

    exit 11
}

grep -qe "^$domain_user" /etc/passwd && {
    echo "âš   This script creates a local account, '$app-$domain_user', for a *non-local* (AD domain) user." >&2
    echo "    However, this user ($domain_user) is *local*." >&2
    echo "    Local users are advised to run (rootless) Podman from their existing local account." >&2

    exit 22
}

seVerify(){
    ## Verify SELinux fcontext equivalence : "/home = $alt/home"
    semanage fcontext --list |grep "$alt" |grep "$alt/home = /home"
}
export -f seVerify

mkdir -p $alt/home
seVerify || {
    ## Force SELinux to accept SELinux declarations REGARDLESS of current state of SELinux objects at target(s)
    semanage fcontext --delete "$alt/home(/.*)?" 2>/dev/null # Delete all rules; is okay if no rules exist.
    restorecon -Rv $alt/home # Apply the above purge (now).
    ## Declare SELinux fcontext EQUIVALENCE : "/home = $alt/home"
    semanage fcontext --add --equal /home $alt/home
    restorecon -Rv $alt/home # Apply the above rule (now).
}

id "$local_user" >/dev/null 2>&1 || {
    useradd --create-home --home-dir $alt_home --shell /sbin/nologin $local_user
    loginctl enable-linger "$local_user"
}
id "$local_user" >/dev/null 2>&1 || {
    echo "âš   ERR : FAILed @ useradd : '$local_user' does NOT EXIST." >&2

    exit 33
}
groups "$local_user" |grep $app_sudoers ||
usermod -aG "$app_sudoers" $local_user

groups "$domain_user" |grep $app_sudoers ||
    usermod -aG "$app_sudoers" "$domain_user"

groups "$domain_user" |grep $local_group ||
    usermod -aG "$local_group" "$domain_user" &&
        echo "ðŸš§  User '$domain_user' MUST LOGOUT/LOGIN to activate their membership in groups: '$sudoers' and '$local_group'." >&2

chown -R $local_user:$local_group $alt_home
find $alt_home -type d -exec chmod 775 {} \+
find $alt_home -type f -exec chmod 660 {} \+

restorecon -Rv $alt/home # Apply any resulting SELinux fcontext changes (again, just to be sure).
ls -ZRhl $alt
seVerify || {
    echo "âš   ERR : FAILed @ SELinux : semanage fcontext" >&2

    exit 66
}

grep -q $local_user /etc/subuid || {
    echo "âš   ERR : FAILed to add subUID range for local user '$local_user'" >&2
    
    exit 77
}
grep -q $local_group /etc/subgid || {
    echo "âš   ERR : FAILed to add subGID range for local group '$local_group'" >&2

    exit 78
}

/usr/local/bin/podman run --rm --volume $alt_home:/mnt/home $img sh -c '
    echo "ðŸš€  Hello from the container : $(whoami)@$(hostname -f) !"
    umask 002
    ls -hl /mnt/home/test-*
    touch /mnt/home/test-write-access-$(date -u '+%Y-%m-%dT%H.%M.%SZ')
    ls -hl /mnt/home/test-*
'

echo "âœ…  Provision complete."
exit 0